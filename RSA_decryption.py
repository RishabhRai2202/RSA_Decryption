import math
import random


def inverse(a, n):
    return pow(a, -1, n)

def decrypt_rsa(ciphertext, n, p, q, e):
    # Step 1: Calculate the totient of N
    phi = (p - 1) * (q - 1)

    # Step 2: Find the private exponent d
    d = inverse(e, phi)

    # Step 3: Decrypt the message
    plaintext = pow(ciphertext, d, n)
    return plaintext

def lcm(a, b):
    return abs(a*b) // math.gcd(a, b)


ciphertext = 44641914821074071930297814589851746700593470770417111804648920018396305246956127337150936081144106405284134845851392541080862652386840869768622438038690803472550278042463029816028777378141217023336710545449512973950591755053735796799773369044083673911035030605581144977552865771395578778515514288930832915182

p = 7493025776465062819629921475535241674460826792785520881387158343265274170009282504884941039852933109163193651830303308312565580445669284847225535166520307
q = 7020854527787566735458858381555452648322845008266612906844847937070333480373963284146649074252278753696897245898433245929775591091774274652021374143174079
n = p*q


e = 30802007917952508422792869021689193927485016332713622527025219105154254472344627284947779726280995431947454292782426313255523137610532323813714483639434257536830062768286377920010841850346837238015571464755074669373110411870331706974573498912126641409821855678581804467608824177508976254759319210955977053997

decrypted_message = decrypt_rsa(ciphertext, n, p, q, e)
print("Decrypted message:", decrypted_message)

password_int = decrypted_message  # This is the integer value you want to reverse
hex_str = hex(password_int)[2:]  # Convert integer to hexadecimal string and remove '0x' prefix
decoded_str = bytes.fromhex(hex_str).decode('utf-8')  # Decode the hexadecimal string to get the original password

print("final string: ",decoded_str)
